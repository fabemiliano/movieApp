{"version":3,"sources":["images/logo.png","images/loupe.svg","images/loader.png","services/movieApi.js","context/Context.jsx","components/SideBar.jsx","components/GenreSelector.jsx","components/SearchBar.jsx","components/Loading.jsx","components/MainPage.jsx","components/MovieDetails.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","key","process","getMovie","movie","type","a","fetch","then","response","json","getMovieByGenre","genre","getTopMovies","page","getMovieInfo","id","console","log","getMovieVideos","getNowPlaying","getGenres","trending","getReviews","ApplicationContext","createContext","setMovieList","setIsLoading","arrayOfMovies","i","api","results","forEach","e","push","ApplicationProvider","children","useState","apiType","setApiType","apiTypeForSearch","setApiTypeForSearch","movieList","filterGenre","setFilterGenre","bestMovies","setBestMovies","isLoading","searchForSomething","setSearchForSomething","setMovie","useEffect","getListOfBestMovies","data","onlyWithPoster","reduce","acc","poster_path","context","Provider","value","SideBar","useContext","className","to","onClick","filter","genres","genreId","name","GenreSelector","setGenres","onChange","target","filterMovies","map","doSearch","SearchBar","inputValue","setInputValue","src","logo","alt","onKeyDown","keyCode","placeholder","disabled","magnifier","Loading","loader","MainPage","mediaType","media_type","voteAverage","vote_average","posterPath","title","profilePath","profile_path","parseInt","toFixed","renderList","renderPeople","renderBestMovies","MovieDetails","props","match","params","setData","videos","setVideos","reviews","setReviews","result","overview","length","author","content","url","slice","href","reduceContent","sum","videoId","opts","width","height","birthDay","biography","birthday","place_of_birth","App","path","render","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79e0009a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f1f7de47.png\";","module.exports = __webpack_public_path__ + \"static/media/loupe.c5f8473f.svg\";","module.exports = __webpack_public_path__ + \"static/media/loader.fca62fb2.png\";","const key = process.env.REACT_APP_APIKEY;\n\nexport const getMovie = async (movie, type) => {\n  switch (type) {\n    case 'tv': return fetch(`https://api.themoviedb.org/3/search/tv?api_key=${key}&language=en-US&page=1&include_adult=false&query=${movie}`)\n      .then((response) => response.json());\n    case 'people': return fetch(`https://api.themoviedb.org/3/search/person?api_key=${key}&language=en-US&page=1&include_adult=false&query=${movie}`)\n      .then((response) => response.json());\n    default: return fetch(`https://api.themoviedb.org/3/search/movie?api_key=${key}&language=en-US&page=1&include_adult=false&query=${movie}`)\n      .then((response) => response.json());\n  }\n};\n\nexport const getMovieByGenre = async (genre, type) => {\n  switch (type) {\n    case 'tv': return fetch(`https://api.themoviedb.org/3/discover/tv?api_key=${key}&language=en-US&include_adult=false&include_video=false&page=1&with_genres=${genre}`)\n      .then((response) => response.json());\n    default: return fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${key}&language=en-US&include_adult=false&include_video=false&page=1&with_genres=${genre}`)\n      .then((response) => response.json());\n  }\n};\n\nexport const getTopMovies = async (type, page) => {\n  switch (type) {\n    case 'tv': return fetch(`https://api.themoviedb.org/3/tv/top_rated?api_key=${key}&language=en-US&page=${page}`)\n      .then((response) => response.json());\n    default: return fetch(`https://api.themoviedb.org/3/movie/top_rated?api_key=${key}&language=en-US&page=${page}`)\n      .then((response) => response.json());\n  }\n};\n\nexport const getMovieInfo = async (type, id) => {\n  console.log(type);\n  if (type === 'movie') {\n    return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${key}&language=en-US`)\n      .then((response) => response.json());\n  }\n  if (type === 'people') {\n    return fetch(`https://api.themoviedb.org/3/person/${id}?api_key=${key}&language=en-US`)\n      .then((response) => response.json());\n  }\n  return fetch(`https://api.themoviedb.org/3/tv/${id}?api_key=${key}&language=en-US`)\n    .then((response) => response.json());\n};\n\nexport const getMovieVideos = async (type, id) => {\n  if (type === 'movie') {\n    return fetch(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${key}&language=en-US`)\n      .then((response) => response.json());\n  }\n  return fetch(`https://api.themoviedb.org/3/tv/${id}/videos?api_key=${key}&language=en-US`)\n    .then((response) => response.json());\n};\n\nexport const getPopular = async () => fetch(`https://api.themoviedb.org/3/movie/popular/?api_key=${key}`)\n  .then((response) => response.json());\n\nexport const getNowPlaying = async (type) => {\n  if (type === 'movie') {\n    return fetch(`https://api.themoviedb.org/3/movie/now_playing/?api_key=${key}`)\n      .then((response) => response.json());\n  }\n  if (type === 'people') {\n    return fetch(`https://api.themoviedb.org/3/person/popular?api_key=${key}&language=en-US`)\n      .then((response) => (response.json()));\n  }\n  return fetch(`https://api.themoviedb.org/3/tv/airing_today/?api_key=${key}`)\n    .then((response) => response.json());\n};\n\nexport const getGenres = async (type) => {\n  if (type === 'movie') {\n    return fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${key}&language=en-US`)\n      .then((response) => response.json());\n  }\n  return fetch(`https://api.themoviedb.org/3/genre/tv/list?api_key=${key}&language=en-US`)\n    .then((response) => response.json());\n};\n\nexport const trending = async () => fetch(`https://api.themoviedb.org/3/trending/all/week?api_key=${key}`)\n  .then((response) => response.json());\n\nexport const getReviews = async (type, id) => {\n  if (type === 'movie') {\n    return fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${key}`)\n      .then((response) => response.json());\n  }\n  return fetch(`https://api.themoviedb.org/3/tv/${id}/reviews?api_key=${key}`)\n    .then((response) => response.json());\n};\n","import React, { createContext, useState, useEffect } from 'react';\nimport * as api from '../services/movieApi';\n\nexport const ApplicationContext = createContext();\n\nasync function getListOfBestMovies(setMovieList, setIsLoading) {\n  const arrayOfMovies = [];\n  for (let i = 1; i < 11; i += 1) {\n    const arr = await api.getTopMovies('movie', i).then(({ results }) => { setIsLoading(false); return results; });\n    arr.forEach((e) => arrayOfMovies.push(e));\n  }\n  setMovieList(arrayOfMovies);\n}\n\nexport function ApplicationProvider({ children }) {\n  const [apiType, setApiType] = useState('trending');\n  const [apiTypeForSearch, setApiTypeForSearch] = useState('movie');\n  const [movieList, setMovieList] = useState([]);\n  const [filterGenre, setFilterGenre] = useState([]);\n  const [bestMovies, setBestMovies] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchForSomething, setSearchForSomething] = useState(false);\n  const [movie, setMovie] = useState('');\n  // console.log(apiType)\n\n  useEffect(() => {\n    if (!bestMovies) {\n      if (apiType === 'trending') {\n        api.trending().then(({ results }) => {\n          setMovieList(results);\n          setIsLoading(false);\n        });\n      } else if (searchForSomething) {\n        api.getMovie(movie, apiType).then((data) => {\n          setIsLoading(false);\n          const onlyWithPoster = (data.results).reduce((acc, e) => {\n            if (!e.poster_path) return acc;\n            return [...acc, e];\n          }, []);\n          setMovieList(onlyWithPoster);\n        });\n      } else {\n        api.getNowPlaying(apiType).then(({ results }) => {\n          setMovieList(results);\n          setIsLoading(false);\n        });\n      }\n    } else {\n      getListOfBestMovies(setMovieList, setIsLoading);\n    }\n    return () => { setIsLoading(true); setSearchForSomething(false); };\n  }, [apiType, bestMovies]);\n\n  const context = {\n    movieList,\n    apiType,\n    setApiType,\n    setMovieList,\n    apiTypeForSearch,\n    setApiTypeForSearch,\n    filterGenre,\n    setFilterGenre,\n    bestMovies,\n    setBestMovies,\n    isLoading,\n    setIsLoading,\n    searchForSomething,\n    setSearchForSomething,\n    movie,\n    setMovie,\n  };\n\n  return (\n    <ApplicationContext.Provider value={context}>\n      {children}\n    </ApplicationContext.Provider>\n  );\n}\n","import React, { useContext } from 'react';\nimport './CSS/SideBar.css';\nimport { Link } from 'react-router-dom';\nimport { ApplicationContext } from '../context/Context';\n\nfunction SideBar() {\n  const {\n    setApiType, apiType, setBestMovies, bestMovies,\n  } = useContext(ApplicationContext);\n\n  return (\n    <div className=\"sidebar\">\n      <Link to=\"/\" className={(apiType === 'trending') && 'selected'} onClick={() => { setApiType('trending'); setBestMovies(false); }}><p>Trending</p></Link>\n      <Link to=\"/\" className={(apiType === 'movie' && !bestMovies) && 'selected'} onClick={() => { setApiType('movie'); setBestMovies(false); }}><p>Movies</p></Link>\n      <Link to=\"/\" className={(apiType === 'tv') && 'selected'} onClick={() => { setApiType('tv'); setBestMovies(false); }}><p>TV</p></Link>\n      <Link to=\"/\" className={(apiType === 'people') && 'selected'} onClick={() => { setApiType('people'); setBestMovies(false); }}><p>People</p></Link>\n      <Link to=\"/\" className={(apiType === 'movie' && bestMovies) && 'selected'} onClick={() => { setApiType('movie'); setBestMovies(true); }}><p>The 200 Best Movies</p></Link>\n    </div>\n  );\n}\n\nexport default SideBar;\n","import React, { useState, useEffect, useContext } from 'react';\nimport * as api from '../services/movieApi';\nimport { ApplicationContext } from '../context/Context';\n\nasync function filterMovies(filter, type, setMovieList) {\n  if (filter !== 'All') {\n    const genreId = (await api.getGenres(type)\n      .then(({ genres }) => genres)).filter((e) => e.name === filter)[0].id;\n    api.getMovieByGenre(genreId, type).then((data) => setMovieList(data.results));\n  } else {\n    api.getNowPlaying(type).then((data) => setMovieList(data.results));\n  }\n}\n\nfunction GenreSelector() {\n  const [genres, setGenres] = useState([]);\n  const {\n    apiType, filterGenre, setFilterGenre, setMovieList,\n  } = useContext(ApplicationContext);\n\n  useEffect(() => {\n    api.getGenres(apiType).then(({ genres }) => setGenres([{ name: 'All' }, ...genres]));\n  }, [setGenres]);\n\n  return (\n    <div className=\"genre-selector\">\n      <p>Choose a Genre</p>\n      <select\n        onChange={(e) => {\n          setFilterGenre(e.target.value); filterMovies(e.target.value, apiType, setMovieList);\n        }}\n        value={filterGenre}\n      >\n        {genres.map(({ name }) => <option value={name}>{name}</option>)}\n      </select>\n    </div>\n  );\n}\n\nexport default GenreSelector;\n","import React, { useState, useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ApplicationContext } from '../context/Context';\nimport logo from '../images/logo.png';\nimport './CSS/SearchBar.css';\nimport magnifier from '../images/loupe.svg';\n\nasync function doSearch(movie, apiType, setApiType, setBestMovies, setMovie, setSearchForSomething) {\n  setBestMovies(false);\n  setApiType(apiType);\n  setMovie(movie);\n  setSearchForSomething(true);\n}\n\nfunction SearchBar() {\n  const [inputValue, setInputValue] = useState('');\n  const {\n    setApiTypeForSearch,\n    apiTypeForSearch, setApiType, setBestMovies, setMovie, setSearchForSomething,\n  } = useContext(ApplicationContext);\n  return (\n    <div className=\"search-bar\">\n      <Link to=\"/\" onClick={() => { setApiType('trending'); setBestMovies(false); }}><img src={logo} alt=\"logo\" /></Link>\n      <div className=\"search-area\">\n        <div className=\"input-area\">\n          <input\n            onKeyDown={(e) => { if (e.keyCode === 13) { doSearch(inputValue, apiTypeForSearch, setApiType, setBestMovies, setMovie, setSearchForSomething); } }}\n            placeholder=\"Search for something\"\n            onChange={(e) => setInputValue(e.target.value)}\n            value={inputValue}\n          />\n          <button disabled={((inputValue === ''))} type=\"button\" onClick={() => { doSearch(inputValue, apiTypeForSearch, setApiType, setBestMovies, setMovie, setSearchForSomething); }}><img src={magnifier} /></button>\n        </div>\n        <select onChange={(e) => { setApiTypeForSearch(e.target.value); }}>\n          <option value=\"movie\">Movies</option>\n          <option value=\"tv\">TV Shows</option>\n          <option value=\"people\">People</option>\n        </select>\n      </div>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport loader from '../images/loader.png';\n\nfunction Loading() {\n  return (\n    <div className=\"loading\">\n      <img src={loader} />\n    </div>\n  );\n}\n\nexport default Loading;\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport SideBar from './SideBar';\nimport './CSS/MainPage.css';\nimport { ApplicationContext } from '../context/Context';\nimport GenreSelector from './GenreSelector';\nimport SearchBar from './SearchBar';\nimport Loading from './Loading';\n\nfunction renderList(movieList, setApiType, apiType) {\n  return (\n    <div className=\"main-page\">\n      {(apiType !== 'people' && apiType !== 'trending') && <GenreSelector />}\n      <div className=\"main-container\">\n        {movieList.map(({\n          id, media_type: mediaType,\n          vote_average: voteAverage,\n          poster_path: posterPath, title, name, profile_path: profilePath,\n        }) => (\n          <Link to={`/details/${id}`} onClick={() => { if (mediaType) { setApiType(mediaType); } }}>\n            <div className=\"movie-infos\">\n              <div>\n                <h4>{mediaType}</h4>\n                <h3>{title || name}</h3>\n              </div>\n              <img src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2${posterPath || profilePath}`} alt=\"\" />\n              <p>{`${parseInt(voteAverage, 10).toFixed(1)}`}</p>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction renderPeople(movieList) {\n  return (\n    <div className=\"people-container\">\n      {movieList.map(({ id, name, profile_path: profilePath }) => (\n        <Link to={`/details/${id}`}>\n          <div className=\"people-card\">\n            <div>\n              <p>{name}</p>\n            </div>\n            <img src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2${profilePath}`} alt=\"\" />\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nfunction renderBestMovies(movieList) {\n  return (\n    <div className=\"best-container\">\n      <div className=\"best-infos-main\">\n        <p>Position</p>\n        <p>Title</p>\n        <p>Rating</p>\n      </div>\n      <div className=\"best-bar\">\n        {movieList.map(({\n          title, poster_path: posterPath, vote_average: voteAverage, id,\n        }, i) => (\n          <Link to={`/details/${id}`}>\n            <div className=\"best-infos\">\n              <p>{}</p>\n              <img src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2${posterPath}`} alt=\"\" />\n              <div>\n                <p className=\"inner-text\">{`${i + 1}. ${title}`}</p>\n              </div>\n              <p>{parseInt(voteAverage, 10).toFixed(1)}</p>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction MainPage() {\n  const {\n    movieList, apiType, setApiType, filterGenre, bestMovies, isLoading,\n  } = useContext(ApplicationContext);\n\n  return (\n    <div>\n      <div className=\"all-screen\">\n        <SearchBar />\n        <div className=\"side-and-main\">\n          <SideBar />\n          {(!isLoading) && (\n            <div className=\"search-and-main\">\n              {(!bestMovies) && (apiType !== 'people') && renderList(movieList, setApiType, apiType, filterGenre)}\n              {(!bestMovies) && (apiType === 'people') && renderPeople(movieList)}\n              {(bestMovies) && renderBestMovies(movieList)}\n            </div>\n          )}\n          {(isLoading) && <Loading />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MainPage;\n","import React, { useState, useEffect, useContext } from 'react';\nimport YouTube from 'react-youtube';\nimport { getMovieInfo, getMovieVideos, getReviews } from '../services/movieApi';\nimport { ApplicationContext } from '../context/Context';\nimport SideBar from './SideBar';\nimport Loading from './Loading';\nimport SearchBar from './SearchBar';\n\nfunction MovieDetails(props) {\n  const { props: { match: { params: { id } } } } = props;\n  const [data, setData] = useState({});\n  const [videos, setVideos] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const { apiType, isLoading, setIsLoading } = useContext(ApplicationContext);\n\n  useEffect(() => {\n    getMovieInfo(apiType, id).then((result) => setData(result));\n    (apiType === 'movie') && getReviews(apiType, id).then((data) => setReviews(data.results));\n    getMovieVideos(apiType, id).then(({ results }) => { setVideos(results); setIsLoading(false); });\n    return setIsLoading(true);\n  }, []);\n\n  function reduceContent(content, url) {\n    return (\n      <div>\n        <p>{`${content.slice(0, 300)}...`}</p>\n        <a href={url}>ReadMore</a>\n      </div>\n    );\n  }\n\n  function renderMovieOrShow() {\n    return (\n      <div>\n        <div className=\"main-info\">\n          <div>\n            <h1>{data.title}</h1>\n            <p>{data.overview}</p>\n          </div>\n        </div>\n        <div className=\"reviews\">\n          <h2>Reviews</h2>\n          {(reviews.length === 0) && <p>No reviews found</p>}\n          {(reviews.length > 0) && reviews.map(({ author, content, url }) => (\n            <div>\n              <p>{author}</p>\n              {(content.length < 300) ? <p>{content}</p> : reduceContent(content, url)}\n            </div>\n          ))}\n        </div>\n        <div className=\"video-container\">\n          {(videos) && videos.reduce((sum, e, i) => {\n            if (i < 10) {\n              return [...sum, <YouTube videoId={e.key} opts={{ width: '300px', height: '200px' }} />];\n            }\n            return sum;\n          }, [])}\n        </div>\n        <img className=\"teste2\" src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2${data.poster_path}`} alt=\"\" />\n      </div>\n    );\n  }\n\n  function renderPeople() {\n    return (\n      <div className=\"people-details\">\n        <div className=\"main-info-details\">\n          <div>\n            <h1>{data.name}</h1>\n            <h3>{data.birthDay}</h3>\n            <p>{data.biography}</p>\n            <p>{`DOB: ${data.birthday}`}</p>\n            <p>{`POB: ${data.place_of_birth}`}</p>\n          </div>\n          <img className=\"teste\" src={`https://image.tmdb.org/t/p/w600_and_h900_bestv2${data.profile_path}`} alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"side-and-main\">\n      <SideBar />\n      <SearchBar />\n      {(isLoading) && <Loading />}\n      {(!isLoading) && (\n        <div className=\"movie-details-container\">\n          {(apiType !== 'people') && renderMovieOrShow()}\n          {(apiType === 'people') && renderPeople()}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport MainPage from './components/MainPage';\nimport MovieDetails from './components/MovieDetails';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/details/:id\" render={(props) => <MovieDetails props={props} />} />\n        <Route path=\"/\" component={MainPage} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApplicationProvider } from './context/Context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApplicationProvider>\n      <App />\n    </ApplicationProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}